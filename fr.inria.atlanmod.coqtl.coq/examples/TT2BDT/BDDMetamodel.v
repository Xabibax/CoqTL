
(********************************************************************
	@name Coq declarations for metamodel: <BinaryDecissionTreeModel>
	@date 2020/11/07 21:16:43
	@description Automatically generated by Ecore2Coq transformation.
 ********************************************************************)

(* Coq libraries *)
Require Import Bool.
Require Import String.
Require Import List.
Require Import Multiset.
Require Import ListSet.
Require Import Omega.
Require Import Coq.Logic.Eqdep_dec.

(* CoqTL libraries *)
Require Import core.utils.tTop.
Require Import core.Metamodel.
Require Import core.Model.

(* Base types *)
Inductive BinaryDecisionDiagram : Set :=
  BuildBinaryDecisionDiagram :
  (* name *) string ->
  BinaryDecisionDiagram.
  
Inductive Tree : Set :=
  BuildTree :
  Tree.
  
Inductive Subtree : Set :=
  BuildSubtree :
  Subtree.
  
Inductive Leaf : Set :=
  BuildLeaf :
  Leaf.
  
Inductive Assignement : Set :=
  BuildAssignement :
  (* value *) bool ->
  Assignement.
  
Inductive OutputPort : Set :=
  BuildOutputPort :
  OutputPort.
  
Inductive Port : Set :=
  BuildPort :
  (* name *) string ->
  Port.
  
Inductive InputPort : Set :=
  BuildInputPort :
  InputPort.
  

Inductive BinaryDecisionDiagramTree : Set :=
   BuildBinaryDecisionDiagramTree :
   BinaryDecisionDiagram ->
   Tree ->
   BinaryDecisionDiagramTree.
Inductive BinaryDecisionDiagramPorts : Set :=
   BuildBinaryDecisionDiagramPorts :
   BinaryDecisionDiagram ->
   list Port ->
   BinaryDecisionDiagramPorts.

Inductive TreeOwner : Set :=
   BuildTreeOwner :
   Tree ->
   BinaryDecisionDiagram ->
   TreeOwner.
Inductive TreeOwnerSubtreeForOne : Set :=
   BuildTreeOwnerSubtreeForOne :
   Tree ->
   Subtree ->
   TreeOwnerSubtreeForOne.
Inductive TreeOwnerSubtreeForZero : Set :=
   BuildTreeOwnerSubtreeForZero :
   Tree ->
   Subtree ->
   TreeOwnerSubtreeForZero.

Inductive SubtreeTreeForOne : Set :=
   BuildSubtreeTreeForOne :
   Subtree ->
   Tree ->
   SubtreeTreeForOne.
Inductive SubtreeTreeForZero : Set :=
   BuildSubtreeTreeForZero :
   Subtree ->
   Tree ->
   SubtreeTreeForZero.
Inductive SubtreePort : Set :=
   BuildSubtreePort :
   Subtree ->
   InputPort ->
   SubtreePort.

Inductive LeafAssignments : Set :=
   BuildLeafAssignments :
   Leaf ->
   list Assignement ->
   LeafAssignments.

Inductive AssignementOwner : Set :=
   BuildAssignementOwner :
   Assignement ->
   Leaf ->
   AssignementOwner.
Inductive AssignementPort : Set :=
   BuildAssignementPort :
   Assignement ->
   OutputPort ->
   AssignementPort.

Inductive OutputPortAssignments : Set :=
   BuildOutputPortAssignments :
   OutputPort ->
   list Assignement ->
   OutputPortAssignments.

Inductive PortOwner : Set :=
   BuildPortOwner :
   Port ->
   BinaryDecisionDiagram ->
   PortOwner.

Inductive InputPortSubtrees : Set :=
   BuildInputPortSubtrees :
   InputPort ->
   list Subtree ->
   InputPortSubtrees.


(* Inheritence *)



Inductive SubtreeIsTree : Set :=
   BuildSubtreeIsTree :
   Subtree ->
   Tree ->
   SubtreeIsTree.

Inductive LeafIsTree : Set :=
   BuildLeafIsTree :
   Leaf ->
   Tree ->
   LeafIsTree.


Inductive OutputPortIsPort : Set :=
   BuildOutputPortIsPort :
   OutputPort ->
   Port ->
   OutputPortIsPort.


Inductive InputPortIsPort : Set :=
   BuildInputPortIsPort :
   InputPort ->
   Port ->
   InputPortIsPort.


Inductive BinaryDecissionTreeModelMetamodel_InheritReference : Set :=
| SubtreeIsTreeInheritReference
| LeafIsTreeInheritReference
| OutputPortIsPortInheritReference
| InputPortIsPortInheritReference
.

(* Accessors *)
Definition getBinaryDecisionDiagramName (b : BinaryDecisionDiagram) : string :=
  match b with BuildBinaryDecisionDiagram name  => name end.
 
 
 
 
Definition getAssignementValue (a : Assignement) : bool :=
  match a with BuildAssignement value  => value end.
 
 
Definition getPortName (p : Port) : string :=
  match p with BuildPort name  => name end.
 
 

(* Equality for Types *)
(**? We define eq for Eclass on their fist attribute **)
Definition beq_BinaryDecisionDiagram (bi_arg1 : BinaryDecisionDiagram) (bi_arg2 : BinaryDecisionDiagram) : bool :=
  beq_string (getBinaryDecisionDiagramName bi_arg1) (getBinaryDecisionDiagramName bi_arg2).




Definition beq_Assignement (as_arg1 : Assignement) (as_arg2 : Assignement) : bool :=
  beq_bool (getAssignementValue as_arg1) (getAssignementValue as_arg2).


Definition beq_Port (po_arg1 : Port) (po_arg2 : Port) : bool :=
  beq_string (getPortName po_arg1) (getPortName po_arg2).


		
(* Meta-types *)
Inductive BinaryDecissionTreeModelMetamodel_EClass : Set :=
  | BinaryDecisionDiagramEClass
  | TreeEClass
  | SubtreeEClass
  | LeafEClass
  | AssignementEClass
  | OutputPortEClass
  | PortEClass
  | InputPortEClass
.

Definition BinaryDecissionTreeModelMetamodel_getTypeByEClass (biec_arg : BinaryDecissionTreeModelMetamodel_EClass) : Set :=
  match biec_arg with
    | BinaryDecisionDiagramEClass => BinaryDecisionDiagram
    | TreeEClass => Tree
    | SubtreeEClass => Subtree
    | LeafEClass => Leaf
    | AssignementEClass => Assignement
    | OutputPortEClass => OutputPort
    | PortEClass => Port
    | InputPortEClass => InputPort
  end.

(**? confusing name convention **)
Definition BinaryDecissionTreeModelMetamodel_getEAttributeTypesByEClass (biec_arg : BinaryDecissionTreeModelMetamodel_EClass) : Set :=
  match biec_arg with
    | BinaryDecisionDiagramEClass => (string)
    | TreeEClass => (Empty_set)
    | SubtreeEClass => (Empty_set)
    | LeafEClass => (Empty_set)
    | AssignementEClass => (bool)
    | OutputPortEClass => (Empty_set)
    | PortEClass => (string)
    | InputPortEClass => (Empty_set)
  end.

Inductive BinaryDecissionTreeModelMetamodel_EReference : Set :=
| BinaryDecisionDiagramTreeEReference
| BinaryDecisionDiagramPortsEReference
| TreeOwnerEReference
| TreeOwnerSubtreeForOneEReference
| TreeOwnerSubtreeForZeroEReference
| SubtreeTreeForOneEReference
| SubtreeTreeForZeroEReference
| SubtreePortEReference
| LeafAssignmentsEReference
| AssignementOwnerEReference
| AssignementPortEReference
| OutputPortAssignmentsEReference
| PortOwnerEReference
| InputPortSubtreesEReference
.

Definition BinaryDecissionTreeModelMetamodel_getTypeByEReference (bier_arg : BinaryDecissionTreeModelMetamodel_EReference) : Set :=
  match bier_arg with
| BinaryDecisionDiagramTreeEReference => BinaryDecisionDiagramTree
| BinaryDecisionDiagramPortsEReference => BinaryDecisionDiagramPorts
| TreeOwnerEReference => TreeOwner
| TreeOwnerSubtreeForOneEReference => TreeOwnerSubtreeForOne
| TreeOwnerSubtreeForZeroEReference => TreeOwnerSubtreeForZero
| SubtreeTreeForOneEReference => SubtreeTreeForOne
| SubtreeTreeForZeroEReference => SubtreeTreeForZero
| SubtreePortEReference => SubtreePort
| LeafAssignmentsEReference => LeafAssignments
| AssignementOwnerEReference => AssignementOwner
| AssignementPortEReference => AssignementPort
| OutputPortAssignmentsEReference => OutputPortAssignments
| PortOwnerEReference => PortOwner
| InputPortSubtreesEReference => InputPortSubtrees
  end.

(**? confusing name convention **)
Definition BinaryDecissionTreeModelMetamodel_getERoleTypesByEReference (bier_arg : BinaryDecissionTreeModelMetamodel_EReference) : Set :=
  match bier_arg with
| BinaryDecisionDiagramTreeEReference => (BinaryDecisionDiagram * Tree)
| BinaryDecisionDiagramPortsEReference => (BinaryDecisionDiagram * list Port)
| TreeOwnerEReference => (Tree * BinaryDecisionDiagram)
| TreeOwnerSubtreeForOneEReference => (Tree * Subtree)
| TreeOwnerSubtreeForZeroEReference => (Tree * Subtree)
| SubtreeTreeForOneEReference => (Subtree * Tree)
| SubtreeTreeForZeroEReference => (Subtree * Tree)
| SubtreePortEReference => (Subtree * InputPort)
| LeafAssignmentsEReference => (Leaf * list Assignement)
| AssignementOwnerEReference => (Assignement * Leaf)
| AssignementPortEReference => (Assignement * OutputPort)
| OutputPortAssignmentsEReference => (OutputPort * list Assignement)
| PortOwnerEReference => (Port * BinaryDecisionDiagram)
| InputPortSubtreesEReference => (InputPort * list Subtree)
  end.

(* Generic types *)





(**? Changed Ctr name **)
Inductive BinaryDecissionTreeModelMetamodel_EObject : Set :=
 | Build_BinaryDecissionTreeModelMetamodel_EObject : 
    forall (biec_arg: BinaryDecissionTreeModelMetamodel_EClass), (BinaryDecissionTreeModelMetamodel_getTypeByEClass biec_arg) -> BinaryDecissionTreeModelMetamodel_EObject.

Inductive BinaryDecissionTreeModelMetamodel_ELink : Set :=
 | Build_BinaryDecissionTreeModelMetamodel_ELink : 
    forall (bier_arg:BinaryDecissionTreeModelMetamodel_EReference), (BinaryDecissionTreeModelMetamodel_getTypeByEReference bier_arg) -> BinaryDecissionTreeModelMetamodel_ELink.

(* Reflective functions *)

Lemma BinaryDecissionTreeModelMetamodel_eqEClass_dec : 
 forall (biec_arg1:BinaryDecissionTreeModelMetamodel_EClass) (biec_arg2:BinaryDecissionTreeModelMetamodel_EClass), { biec_arg1 = biec_arg2 } + { biec_arg1 <> biec_arg2 }.
Proof. repeat decide equality. Defined.

Lemma BinaryDecissionTreeModelMetamodel_eqEReference_dec : 
 forall (bier_arg1:BinaryDecissionTreeModelMetamodel_EReference) (bier_arg2:BinaryDecissionTreeModelMetamodel_EReference), { bier_arg1 = bier_arg2 } + { bier_arg1 <> bier_arg2 }.
Proof. repeat decide equality. Defined.

Definition BinaryDecissionTreeModelMetamodel_getEClass (bieo_arg : BinaryDecissionTreeModelMetamodel_EObject) : BinaryDecissionTreeModelMetamodel_EClass :=
   match bieo_arg with
  | (Build_BinaryDecissionTreeModelMetamodel_EObject bieo_arg _) => bieo_arg
   end.

Definition BinaryDecissionTreeModelMetamodel_getEReference (biel_arg : BinaryDecissionTreeModelMetamodel_ELink) : BinaryDecissionTreeModelMetamodel_EReference :=
   match biel_arg with
  | (Build_BinaryDecissionTreeModelMetamodel_ELink biel_arg _) => biel_arg
   end.

Definition BinaryDecissionTreeModelMetamodel_instanceOfEClass (biec_arg: BinaryDecissionTreeModelMetamodel_EClass) (bieo_arg : BinaryDecissionTreeModelMetamodel_EObject): bool :=
  if BinaryDecissionTreeModelMetamodel_eqEClass_dec (BinaryDecissionTreeModelMetamodel_getEClass bieo_arg) biec_arg then true else false.

Definition BinaryDecissionTreeModelMetamodel_instanceOfEReference (bier_arg: BinaryDecissionTreeModelMetamodel_EReference) (biel_arg : BinaryDecissionTreeModelMetamodel_ELink): bool :=
  if BinaryDecissionTreeModelMetamodel_eqEReference_dec (BinaryDecissionTreeModelMetamodel_getEReference biel_arg) bier_arg then true else false.

(** Helper of building EObject for model **)
Definition BinaryDecissionTreeModelMetamodel_getEObjectFromEAttributeValues (biec_arg : BinaryDecissionTreeModelMetamodel_EClass) : (BinaryDecissionTreeModelMetamodel_getEAttributeTypesByEClass biec_arg) -> BinaryDecissionTreeModelMetamodel_EObject :=
  match biec_arg with
    | BinaryDecisionDiagramEClass => (fun (p: (string)) => (Build_BinaryDecissionTreeModelMetamodel_EObject BinaryDecisionDiagramEClass (BuildBinaryDecisionDiagram p)))
    | TreeEClass => (fun (p: Empty_set) => (Build_BinaryDecissionTreeModelMetamodel_EObject TreeEClass (BuildTree)))
    | SubtreeEClass => (fun (p: Empty_set) => (Build_BinaryDecissionTreeModelMetamodel_EObject SubtreeEClass (BuildSubtree)))
    | LeafEClass => (fun (p: Empty_set) => (Build_BinaryDecissionTreeModelMetamodel_EObject LeafEClass (BuildLeaf)))
    | AssignementEClass => (fun (p: (bool)) => (Build_BinaryDecissionTreeModelMetamodel_EObject AssignementEClass (BuildAssignement p)))
    | OutputPortEClass => (fun (p: Empty_set) => (Build_BinaryDecissionTreeModelMetamodel_EObject OutputPortEClass (BuildOutputPort)))
    | PortEClass => (fun (p: (string)) => (Build_BinaryDecissionTreeModelMetamodel_EObject PortEClass (BuildPort p)))
    | InputPortEClass => (fun (p: Empty_set) => (Build_BinaryDecissionTreeModelMetamodel_EObject InputPortEClass (BuildInputPort)))
  end.

(** Helper of building ELink for model **)
Definition BinaryDecissionTreeModelMetamodel_getELinkFromERoleValues (bier_arg : BinaryDecissionTreeModelMetamodel_EReference) : (BinaryDecissionTreeModelMetamodel_getERoleTypesByEReference bier_arg) -> BinaryDecissionTreeModelMetamodel_ELink :=
  match bier_arg with
| BinaryDecisionDiagramTreeEReference => (fun (p: (BinaryDecisionDiagram * Tree)) => (Build_BinaryDecissionTreeModelMetamodel_ELink BinaryDecisionDiagramTreeEReference (BuildBinaryDecisionDiagramTree (fst p) (snd p))))
| BinaryDecisionDiagramPortsEReference => (fun (p: (BinaryDecisionDiagram * list Port)) => (Build_BinaryDecissionTreeModelMetamodel_ELink BinaryDecisionDiagramPortsEReference (BuildBinaryDecisionDiagramPorts (fst p) (snd p))))
| TreeOwnerEReference => (fun (p: (Tree * BinaryDecisionDiagram)) => (Build_BinaryDecissionTreeModelMetamodel_ELink TreeOwnerEReference (BuildTreeOwner (fst p) (snd p))))
| TreeOwnerSubtreeForOneEReference => (fun (p: (Tree * Subtree)) => (Build_BinaryDecissionTreeModelMetamodel_ELink TreeOwnerSubtreeForOneEReference (BuildTreeOwnerSubtreeForOne (fst p) (snd p))))
| TreeOwnerSubtreeForZeroEReference => (fun (p: (Tree * Subtree)) => (Build_BinaryDecissionTreeModelMetamodel_ELink TreeOwnerSubtreeForZeroEReference (BuildTreeOwnerSubtreeForZero (fst p) (snd p))))
| SubtreeTreeForOneEReference => (fun (p: (Subtree * Tree)) => (Build_BinaryDecissionTreeModelMetamodel_ELink SubtreeTreeForOneEReference (BuildSubtreeTreeForOne (fst p) (snd p))))
| SubtreeTreeForZeroEReference => (fun (p: (Subtree * Tree)) => (Build_BinaryDecissionTreeModelMetamodel_ELink SubtreeTreeForZeroEReference (BuildSubtreeTreeForZero (fst p) (snd p))))
| SubtreePortEReference => (fun (p: (Subtree * InputPort)) => (Build_BinaryDecissionTreeModelMetamodel_ELink SubtreePortEReference (BuildSubtreePort (fst p) (snd p))))
| LeafAssignmentsEReference => (fun (p: (Leaf * list Assignement)) => (Build_BinaryDecissionTreeModelMetamodel_ELink LeafAssignmentsEReference (BuildLeafAssignments (fst p) (snd p))))
| AssignementOwnerEReference => (fun (p: (Assignement * Leaf)) => (Build_BinaryDecissionTreeModelMetamodel_ELink AssignementOwnerEReference (BuildAssignementOwner (fst p) (snd p))))
| AssignementPortEReference => (fun (p: (Assignement * OutputPort)) => (Build_BinaryDecissionTreeModelMetamodel_ELink AssignementPortEReference (BuildAssignementPort (fst p) (snd p))))
| OutputPortAssignmentsEReference => (fun (p: (OutputPort * list Assignement)) => (Build_BinaryDecissionTreeModelMetamodel_ELink OutputPortAssignmentsEReference (BuildOutputPortAssignments (fst p) (snd p))))
| PortOwnerEReference => (fun (p: (Port * BinaryDecisionDiagram)) => (Build_BinaryDecissionTreeModelMetamodel_ELink PortOwnerEReference (BuildPortOwner (fst p) (snd p))))
| InputPortSubtreesEReference => (fun (p: (InputPort * list Subtree)) => (Build_BinaryDecissionTreeModelMetamodel_ELink InputPortSubtreesEReference (BuildInputPortSubtrees (fst p) (snd p))))
  end.

Definition BinaryDecissionTreeModelMetamodel_toEClass (biec_arg : BinaryDecissionTreeModelMetamodel_EClass) (bieo_arg : BinaryDecissionTreeModelMetamodel_EObject) : option (BinaryDecissionTreeModelMetamodel_getTypeByEClass biec_arg).
Proof.
  destruct bieo_arg as [arg1 arg2].
  destruct (BinaryDecissionTreeModelMetamodel_eqEClass_dec arg1 biec_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
    exact (Some arg2).
  - exact None.
Defined.

Definition BinaryDecissionTreeModelMetamodel_toEReference (bier_arg : BinaryDecissionTreeModelMetamodel_EReference) (biel_arg : BinaryDecissionTreeModelMetamodel_ELink) : option (BinaryDecissionTreeModelMetamodel_getTypeByEReference bier_arg).
Proof.
  destruct biel_arg as [arg1 arg2].
  destruct (BinaryDecissionTreeModelMetamodel_eqEReference_dec arg1 bier_arg) as [e|] eqn:dec_case.
  - rewrite e in arg2.
  	exact (Some arg2).
  - exact None.
Defined.

(* Generic functions *)
Definition BinaryDecissionTreeModelMetamodel_toEObjectFromBinaryDecisionDiagram (bi_arg :BinaryDecisionDiagram) : BinaryDecissionTreeModelMetamodel_EObject :=
  (Build_BinaryDecissionTreeModelMetamodel_EObject BinaryDecisionDiagramEClass bi_arg).
Coercion BinaryDecissionTreeModelMetamodel_toEObjectFromBinaryDecisionDiagram : BinaryDecisionDiagram >-> BinaryDecissionTreeModelMetamodel_EObject.

Definition BinaryDecissionTreeModelMetamodel_toEObjectFromTree (tr_arg :Tree) : BinaryDecissionTreeModelMetamodel_EObject :=
  (Build_BinaryDecissionTreeModelMetamodel_EObject TreeEClass tr_arg).
Coercion BinaryDecissionTreeModelMetamodel_toEObjectFromTree : Tree >-> BinaryDecissionTreeModelMetamodel_EObject.

Definition BinaryDecissionTreeModelMetamodel_toEObjectFromSubtree (su_arg :Subtree) : BinaryDecissionTreeModelMetamodel_EObject :=
  (Build_BinaryDecissionTreeModelMetamodel_EObject SubtreeEClass su_arg).
Coercion BinaryDecissionTreeModelMetamodel_toEObjectFromSubtree : Subtree >-> BinaryDecissionTreeModelMetamodel_EObject.

Definition BinaryDecissionTreeModelMetamodel_toEObjectFromLeaf (le_arg :Leaf) : BinaryDecissionTreeModelMetamodel_EObject :=
  (Build_BinaryDecissionTreeModelMetamodel_EObject LeafEClass le_arg).
Coercion BinaryDecissionTreeModelMetamodel_toEObjectFromLeaf : Leaf >-> BinaryDecissionTreeModelMetamodel_EObject.

Definition BinaryDecissionTreeModelMetamodel_toEObjectFromAssignement (as_arg :Assignement) : BinaryDecissionTreeModelMetamodel_EObject :=
  (Build_BinaryDecissionTreeModelMetamodel_EObject AssignementEClass as_arg).
Coercion BinaryDecissionTreeModelMetamodel_toEObjectFromAssignement : Assignement >-> BinaryDecissionTreeModelMetamodel_EObject.

Definition BinaryDecissionTreeModelMetamodel_toEObjectFromOutputPort (ou_arg :OutputPort) : BinaryDecissionTreeModelMetamodel_EObject :=
  (Build_BinaryDecissionTreeModelMetamodel_EObject OutputPortEClass ou_arg).
Coercion BinaryDecissionTreeModelMetamodel_toEObjectFromOutputPort : OutputPort >-> BinaryDecissionTreeModelMetamodel_EObject.

Definition BinaryDecissionTreeModelMetamodel_toEObjectFromPort (po_arg :Port) : BinaryDecissionTreeModelMetamodel_EObject :=
  (Build_BinaryDecissionTreeModelMetamodel_EObject PortEClass po_arg).
Coercion BinaryDecissionTreeModelMetamodel_toEObjectFromPort : Port >-> BinaryDecissionTreeModelMetamodel_EObject.

Definition BinaryDecissionTreeModelMetamodel_toEObjectFromInputPort (in_arg :InputPort) : BinaryDecissionTreeModelMetamodel_EObject :=
  (Build_BinaryDecissionTreeModelMetamodel_EObject InputPortEClass in_arg).
Coercion BinaryDecissionTreeModelMetamodel_toEObjectFromInputPort : InputPort >-> BinaryDecissionTreeModelMetamodel_EObject.


(**? what are these for **)
Definition BinaryDecissionTreeModelMetamodel_toEObject (bieo_arg : BinaryDecissionTreeModelMetamodel_EObject) : BinaryDecissionTreeModelMetamodel_EObject := bieo_arg.
Definition BinaryDecissionTreeModelMetamodel_toELink (biel_arg : BinaryDecissionTreeModelMetamodel_ELink) : BinaryDecissionTreeModelMetamodel_ELink := biel_arg.
Definition BinaryDecissionTreeModelModel := Model BinaryDecissionTreeModelMetamodel_EObject BinaryDecissionTreeModelMetamodel_ELink.

Definition BinaryDecissionTreeModelMetamodel_toEObjectOfEClass (biec_arg: BinaryDecissionTreeModelMetamodel_EClass) (t: BinaryDecissionTreeModelMetamodel_getTypeByEClass biec_arg) : BinaryDecissionTreeModelMetamodel_EObject :=
  (Build_BinaryDecissionTreeModelMetamodel_EObject biec_arg t).

Definition BinaryDecissionTreeModelMetamodel_toELinkOfEReference (bier_arg: BinaryDecissionTreeModelMetamodel_EReference) (t: BinaryDecissionTreeModelMetamodel_getTypeByEReference bier_arg) : BinaryDecissionTreeModelMetamodel_ELink :=
		  (Build_BinaryDecissionTreeModelMetamodel_ELink bier_arg t).
		  
Fixpoint BinaryDecissionTreeModelMetamodel_getBinaryDecisionDiagramTreeOnLinks (bi_arg : BinaryDecisionDiagram) (l : list BinaryDecissionTreeModelMetamodel_ELink) : option (Tree) :=
match l with
| (Build_BinaryDecissionTreeModelMetamodel_ELink BinaryDecisionDiagramTreeEReference (BuildBinaryDecisionDiagramTree BinaryDecisionDiagram_ctr tree_ctr)) :: l' => 
	  if beq_BinaryDecisionDiagram BinaryDecisionDiagram_ctr bi_arg then Some tree_ctr else BinaryDecissionTreeModelMetamodel_getBinaryDecisionDiagramTreeOnLinks bi_arg l'
| _ :: l' => BinaryDecissionTreeModelMetamodel_getBinaryDecisionDiagramTreeOnLinks bi_arg l'
| nil => None
end.

Definition getBinaryDecisionDiagramTree (bi_arg : BinaryDecisionDiagram) (m : BinaryDecissionTreeModelModel) : option (Tree) :=
  BinaryDecissionTreeModelMetamodel_getBinaryDecisionDiagramTreeOnLinks bi_arg (@allModelLinks _ _ m).
Fixpoint BinaryDecissionTreeModelMetamodel_getBinaryDecisionDiagramPortsOnLinks (bi_arg : BinaryDecisionDiagram) (l : list BinaryDecissionTreeModelMetamodel_ELink) : option (list Port) :=
match l with
| (Build_BinaryDecissionTreeModelMetamodel_ELink BinaryDecisionDiagramPortsEReference (BuildBinaryDecisionDiagramPorts BinaryDecisionDiagram_ctr ports_ctr)) :: l' => 
	  if beq_BinaryDecisionDiagram BinaryDecisionDiagram_ctr bi_arg then Some ports_ctr else BinaryDecissionTreeModelMetamodel_getBinaryDecisionDiagramPortsOnLinks bi_arg l'
| _ :: l' => BinaryDecissionTreeModelMetamodel_getBinaryDecisionDiagramPortsOnLinks bi_arg l'
| nil => None
end.

Definition getBinaryDecisionDiagramPorts (bi_arg : BinaryDecisionDiagram) (m : BinaryDecissionTreeModelModel) : option (list Port) :=
  BinaryDecissionTreeModelMetamodel_getBinaryDecisionDiagramPortsOnLinks bi_arg (@allModelLinks _ _ m).

Fixpoint BinaryDecissionTreeModelMetamodel_getTreeOwnerOnLinks (tr_arg : Tree) (l : list BinaryDecissionTreeModelMetamodel_ELink) : option (BinaryDecisionDiagram) :=
match l with
| (Build_BinaryDecissionTreeModelMetamodel_ELink TreeOwnerEReference (BuildTreeOwner Tree_ctr owner_ctr)) :: l' => 
	  if beq_Tree Tree_ctr tr_arg then Some owner_ctr else BinaryDecissionTreeModelMetamodel_getTreeOwnerOnLinks tr_arg l'
| _ :: l' => BinaryDecissionTreeModelMetamodel_getTreeOwnerOnLinks tr_arg l'
| nil => None
end.

Definition getTreeOwner (tr_arg : Tree) (m : BinaryDecissionTreeModelModel) : option (BinaryDecisionDiagram) :=
  BinaryDecissionTreeModelMetamodel_getTreeOwnerOnLinks tr_arg (@allModelLinks _ _ m).
Fixpoint BinaryDecissionTreeModelMetamodel_getTreeOwnerSubtreeForOneOnLinks (tr_arg : Tree) (l : list BinaryDecissionTreeModelMetamodel_ELink) : option (Subtree) :=
match l with
| (Build_BinaryDecissionTreeModelMetamodel_ELink TreeOwnerSubtreeForOneEReference (BuildTreeOwnerSubtreeForOne Tree_ctr ownerSubtreeForOne_ctr)) :: l' => 
	  if beq_Tree Tree_ctr tr_arg then Some ownerSubtreeForOne_ctr else BinaryDecissionTreeModelMetamodel_getTreeOwnerSubtreeForOneOnLinks tr_arg l'
| _ :: l' => BinaryDecissionTreeModelMetamodel_getTreeOwnerSubtreeForOneOnLinks tr_arg l'
| nil => None
end.

Definition getTreeOwnerSubtreeForOne (tr_arg : Tree) (m : BinaryDecissionTreeModelModel) : option (Subtree) :=
  BinaryDecissionTreeModelMetamodel_getTreeOwnerSubtreeForOneOnLinks tr_arg (@allModelLinks _ _ m).
Fixpoint BinaryDecissionTreeModelMetamodel_getTreeOwnerSubtreeForZeroOnLinks (tr_arg : Tree) (l : list BinaryDecissionTreeModelMetamodel_ELink) : option (Subtree) :=
match l with
| (Build_BinaryDecissionTreeModelMetamodel_ELink TreeOwnerSubtreeForZeroEReference (BuildTreeOwnerSubtreeForZero Tree_ctr ownerSubtreeForZero_ctr)) :: l' => 
	  if beq_Tree Tree_ctr tr_arg then Some ownerSubtreeForZero_ctr else BinaryDecissionTreeModelMetamodel_getTreeOwnerSubtreeForZeroOnLinks tr_arg l'
| _ :: l' => BinaryDecissionTreeModelMetamodel_getTreeOwnerSubtreeForZeroOnLinks tr_arg l'
| nil => None
end.

Definition getTreeOwnerSubtreeForZero (tr_arg : Tree) (m : BinaryDecissionTreeModelModel) : option (Subtree) :=
  BinaryDecissionTreeModelMetamodel_getTreeOwnerSubtreeForZeroOnLinks tr_arg (@allModelLinks _ _ m).

Fixpoint BinaryDecissionTreeModelMetamodel_getSubtreeTreeForOneOnLinks (su_arg : Subtree) (l : list BinaryDecissionTreeModelMetamodel_ELink) : option (Tree) :=
match l with
| (Build_BinaryDecissionTreeModelMetamodel_ELink SubtreeTreeForOneEReference (BuildSubtreeTreeForOne Subtree_ctr treeForOne_ctr)) :: l' => 
	  if beq_Subtree Subtree_ctr su_arg then Some treeForOne_ctr else BinaryDecissionTreeModelMetamodel_getSubtreeTreeForOneOnLinks su_arg l'
| _ :: l' => BinaryDecissionTreeModelMetamodel_getSubtreeTreeForOneOnLinks su_arg l'
| nil => None
end.

Definition getSubtreeTreeForOne (su_arg : Subtree) (m : BinaryDecissionTreeModelModel) : option (Tree) :=
  BinaryDecissionTreeModelMetamodel_getSubtreeTreeForOneOnLinks su_arg (@allModelLinks _ _ m).
Fixpoint BinaryDecissionTreeModelMetamodel_getSubtreeTreeForZeroOnLinks (su_arg : Subtree) (l : list BinaryDecissionTreeModelMetamodel_ELink) : option (Tree) :=
match l with
| (Build_BinaryDecissionTreeModelMetamodel_ELink SubtreeTreeForZeroEReference (BuildSubtreeTreeForZero Subtree_ctr treeForZero_ctr)) :: l' => 
	  if beq_Subtree Subtree_ctr su_arg then Some treeForZero_ctr else BinaryDecissionTreeModelMetamodel_getSubtreeTreeForZeroOnLinks su_arg l'
| _ :: l' => BinaryDecissionTreeModelMetamodel_getSubtreeTreeForZeroOnLinks su_arg l'
| nil => None
end.

Definition getSubtreeTreeForZero (su_arg : Subtree) (m : BinaryDecissionTreeModelModel) : option (Tree) :=
  BinaryDecissionTreeModelMetamodel_getSubtreeTreeForZeroOnLinks su_arg (@allModelLinks _ _ m).
Fixpoint BinaryDecissionTreeModelMetamodel_getSubtreePortOnLinks (su_arg : Subtree) (l : list BinaryDecissionTreeModelMetamodel_ELink) : option (InputPort) :=
match l with
| (Build_BinaryDecissionTreeModelMetamodel_ELink SubtreePortEReference (BuildSubtreePort Subtree_ctr port_ctr)) :: l' => 
	  if beq_Subtree Subtree_ctr su_arg then Some port_ctr else BinaryDecissionTreeModelMetamodel_getSubtreePortOnLinks su_arg l'
| _ :: l' => BinaryDecissionTreeModelMetamodel_getSubtreePortOnLinks su_arg l'
| nil => None
end.

Definition getSubtreePort (su_arg : Subtree) (m : BinaryDecissionTreeModelModel) : option (InputPort) :=
  BinaryDecissionTreeModelMetamodel_getSubtreePortOnLinks su_arg (@allModelLinks _ _ m).

Fixpoint BinaryDecissionTreeModelMetamodel_getLeafAssignmentsOnLinks (le_arg : Leaf) (l : list BinaryDecissionTreeModelMetamodel_ELink) : option (list Assignement) :=
match l with
| (Build_BinaryDecissionTreeModelMetamodel_ELink LeafAssignmentsEReference (BuildLeafAssignments Leaf_ctr assignments_ctr)) :: l' => 
	  if beq_Leaf Leaf_ctr le_arg then Some assignments_ctr else BinaryDecissionTreeModelMetamodel_getLeafAssignmentsOnLinks le_arg l'
| _ :: l' => BinaryDecissionTreeModelMetamodel_getLeafAssignmentsOnLinks le_arg l'
| nil => None
end.

Definition getLeafAssignments (le_arg : Leaf) (m : BinaryDecissionTreeModelModel) : option (list Assignement) :=
  BinaryDecissionTreeModelMetamodel_getLeafAssignmentsOnLinks le_arg (@allModelLinks _ _ m).

Fixpoint BinaryDecissionTreeModelMetamodel_getAssignementOwnerOnLinks (as_arg : Assignement) (l : list BinaryDecissionTreeModelMetamodel_ELink) : option (Leaf) :=
match l with
| (Build_BinaryDecissionTreeModelMetamodel_ELink AssignementOwnerEReference (BuildAssignementOwner Assignement_ctr owner_ctr)) :: l' => 
	  if beq_Assignement Assignement_ctr as_arg then Some owner_ctr else BinaryDecissionTreeModelMetamodel_getAssignementOwnerOnLinks as_arg l'
| _ :: l' => BinaryDecissionTreeModelMetamodel_getAssignementOwnerOnLinks as_arg l'
| nil => None
end.

Definition getAssignementOwner (as_arg : Assignement) (m : BinaryDecissionTreeModelModel) : option (Leaf) :=
  BinaryDecissionTreeModelMetamodel_getAssignementOwnerOnLinks as_arg (@allModelLinks _ _ m).
Fixpoint BinaryDecissionTreeModelMetamodel_getAssignementPortOnLinks (as_arg : Assignement) (l : list BinaryDecissionTreeModelMetamodel_ELink) : option (OutputPort) :=
match l with
| (Build_BinaryDecissionTreeModelMetamodel_ELink AssignementPortEReference (BuildAssignementPort Assignement_ctr port_ctr)) :: l' => 
	  if beq_Assignement Assignement_ctr as_arg then Some port_ctr else BinaryDecissionTreeModelMetamodel_getAssignementPortOnLinks as_arg l'
| _ :: l' => BinaryDecissionTreeModelMetamodel_getAssignementPortOnLinks as_arg l'
| nil => None
end.

Definition getAssignementPort (as_arg : Assignement) (m : BinaryDecissionTreeModelModel) : option (OutputPort) :=
  BinaryDecissionTreeModelMetamodel_getAssignementPortOnLinks as_arg (@allModelLinks _ _ m).

Fixpoint BinaryDecissionTreeModelMetamodel_getOutputPortAssignmentsOnLinks (ou_arg : OutputPort) (l : list BinaryDecissionTreeModelMetamodel_ELink) : option (list Assignement) :=
match l with
| (Build_BinaryDecissionTreeModelMetamodel_ELink OutputPortAssignmentsEReference (BuildOutputPortAssignments OutputPort_ctr assignments_ctr)) :: l' => 
	  if beq_OutputPort OutputPort_ctr ou_arg then Some assignments_ctr else BinaryDecissionTreeModelMetamodel_getOutputPortAssignmentsOnLinks ou_arg l'
| _ :: l' => BinaryDecissionTreeModelMetamodel_getOutputPortAssignmentsOnLinks ou_arg l'
| nil => None
end.

Definition getOutputPortAssignments (ou_arg : OutputPort) (m : BinaryDecissionTreeModelModel) : option (list Assignement) :=
  BinaryDecissionTreeModelMetamodel_getOutputPortAssignmentsOnLinks ou_arg (@allModelLinks _ _ m).

Fixpoint BinaryDecissionTreeModelMetamodel_getPortOwnerOnLinks (po_arg : Port) (l : list BinaryDecissionTreeModelMetamodel_ELink) : option (BinaryDecisionDiagram) :=
match l with
| (Build_BinaryDecissionTreeModelMetamodel_ELink PortOwnerEReference (BuildPortOwner Port_ctr owner_ctr)) :: l' => 
	  if beq_Port Port_ctr po_arg then Some owner_ctr else BinaryDecissionTreeModelMetamodel_getPortOwnerOnLinks po_arg l'
| _ :: l' => BinaryDecissionTreeModelMetamodel_getPortOwnerOnLinks po_arg l'
| nil => None
end.

Definition getPortOwner (po_arg : Port) (m : BinaryDecissionTreeModelModel) : option (BinaryDecisionDiagram) :=
  BinaryDecissionTreeModelMetamodel_getPortOwnerOnLinks po_arg (@allModelLinks _ _ m).

Fixpoint BinaryDecissionTreeModelMetamodel_getInputPortSubtreesOnLinks (in_arg : InputPort) (l : list BinaryDecissionTreeModelMetamodel_ELink) : option (list Subtree) :=
match l with
| (Build_BinaryDecissionTreeModelMetamodel_ELink InputPortSubtreesEReference (BuildInputPortSubtrees InputPort_ctr subtrees_ctr)) :: l' => 
	  if beq_InputPort InputPort_ctr in_arg then Some subtrees_ctr else BinaryDecissionTreeModelMetamodel_getInputPortSubtreesOnLinks in_arg l'
| _ :: l' => BinaryDecissionTreeModelMetamodel_getInputPortSubtreesOnLinks in_arg l'
| nil => None
end.

Definition getInputPortSubtrees (in_arg : InputPort) (m : BinaryDecissionTreeModelModel) : option (list Subtree) :=
  BinaryDecissionTreeModelMetamodel_getInputPortSubtreesOnLinks in_arg (@allModelLinks _ _ m).


Definition BinaryDecissionTreeModelMetamodel_defaultInstanceOfEClass (biec_arg: BinaryDecissionTreeModelMetamodel_EClass) : (BinaryDecissionTreeModelMetamodel_getTypeByEClass biec_arg) :=
  match biec_arg with
  | BinaryDecisionDiagramEClass => (BuildBinaryDecisionDiagram "")
  | TreeEClass => (BuildTree )
  | SubtreeEClass => (BuildSubtree )
  | LeafEClass => (BuildLeaf )
  | AssignementEClass => (BuildAssignement true)
  | OutputPortEClass => (BuildOutputPort )
  | PortEClass => (BuildPort "")
  | InputPortEClass => (BuildInputPort )
  end.

(* Typeclass Instance *)
Instance BinaryDecissionTreeModelMetamodel : Metamodel BinaryDecissionTreeModelMetamodel_EObject BinaryDecissionTreeModelMetamodel_ELink BinaryDecissionTreeModelMetamodel_EClass BinaryDecissionTreeModelMetamodel_EReference :=
  {
    denoteModelClass := BinaryDecissionTreeModelMetamodel_getTypeByEClass;
    denoteModelReference := BinaryDecissionTreeModelMetamodel_getTypeByEReference;
    toModelClass := BinaryDecissionTreeModelMetamodel_toEClass;
    toModelReference := BinaryDecissionTreeModelMetamodel_toEReference;
    toModelElement := BinaryDecissionTreeModelMetamodel_toEObjectOfEClass;
    toModelLink := BinaryDecissionTreeModelMetamodel_toELinkOfEReference;
    bottomModelClass := BinaryDecissionTreeModelMetamodel_defaultInstanceOfEClass;

    (* Theorems *)
    eqModelClass_dec := BinaryDecissionTreeModelMetamodel_eqEClass_dec;
    eqModelReference_dec := BinaryDecissionTreeModelMetamodel_eqEReference_dec;

    (* Constructors *)
    BuildModelElement := Build_BinaryDecissionTreeModelMetamodel_EObject;
    BuildModelLink := Build_BinaryDecissionTreeModelMetamodel_ELink;
  }.
  
(* Useful lemmas *)
Lemma BinaryDecissionTreeModel_invert : 
  forall (biec_arg: BinaryDecissionTreeModelMetamodel_EClass) (t1 t2: BinaryDecissionTreeModelMetamodel_getTypeByEClass biec_arg), Build_BinaryDecissionTreeModelMetamodel_EObject biec_arg t1 = Build_BinaryDecissionTreeModelMetamodel_EObject biec_arg t2 -> t1 = t2.
Proof.
  intros.
  inversion H.
  apply inj_pair2_eq_dec in H1.
  exact H1.
  apply BinaryDecissionTreeModelMetamodel_eqEClass_dec.
Qed.
